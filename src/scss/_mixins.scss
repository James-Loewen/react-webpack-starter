@use 'sass:color';

@mixin defineColorHSL($name, $hue, $saturation, $lightness) {
  #{$name}: unquote("hsl(#{$hue}, #{$saturation}, #{$lightness})");
  #{$name}-h: #{$hue};
  #{$name}-s: #{$saturation};
  #{$name}-l: #{$lightness};
}

@mixin defineColor($name, $color) {
  @include defineColorHSL(
    $name,
    color.hue($color),
    color.saturation($color),
    color.lightness($color),
  )
}

@mixin surfaceColors($color) {
  @include defineColorHSL(
    --bg-clr,
    color.hue($color),
    color.saturation($color),
    color.lightness($color)
  );
  @include defineColorHSL(
    --surface-1-clr,
    color.hue(mix($color, #FFF, 95%)),
    color.saturation(mix($color, #FFF, 95%)),
    color.lightness(mix($color, #FFF, 95%)),
  );
  @include defineColorHSL(
    --surface-2-clr,
    color.hue(mix($color, #FFF, 93%)),
    color.saturation(mix($color, #FFF, 93%)),
    color.lightness(mix($color, #FFF, 93%)),
  );
  @include defineColorHSL(
    --surface-3-clr,
    color.hue(mix($color, #FFF, 91%)),
    color.saturation(mix($color, #FFF, 91%)),
    color.lightness(mix($color, #FFF, 91%)),
  );
  @include defineColorHSL(
    --surface-4-clr,
    color.hue(mix($color, #FFF, 89%)),
    color.saturation(mix($color, #FFF, 89%)),
    color.lightness(mix($color, #FFF, 89%)),
  );
}



@function dp($num: 1) {
  @return var(--surface-#{$num}-clr, var(--bg-clr));
}

// return css color variable with different opacity value
@function alpha($color, $opacity){
  $color: str-replace($color, 'var(');
  $color: str-replace($color, ')');
  $color-h: var(#{$color+'-h'});
  $color-s: var(#{$color+'-s'});
  $color-l: var(#{$color+'-l'});
  @return hsla($color-h, $color-s, $color-l, $opacity);
}

@function lightness($color, $lightnessMultiplier){
  $color: str-replace($color, 'var(');
  $color: str-replace($color, ')');
  $color-h: var(#{$color+'-h'});
  $color-s: var(#{$color+'-s'});
  $color-l: var(#{$color+'-l'});
  @return hsl($color-h, $color-s, calc(#{$color-l} * #{$lightnessMultiplier}));
}

@function saturation($color, $saturationMultiplier){
  $color: str-replace($color, 'var(');
  $color: str-replace($color, ')');
  $color-h: var(#{$color+'-h'});
  $color-s: var(#{$color+'-s'});
  $color-l: var(#{$color+'-l'});
  @return hsl($color-h, calc(#{$color-s} * #{$saturationMultiplier}), $color-l);
}

// replace substring with another string
// credits: https://css-tricks.com/snippets/sass/str-replace-function/
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}